// <auto-generated />
using System;
using Library.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240721075616_ModifiedDataSeed")]
    partial class ModifiedDataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dc4b580-7fb5-4c2a-938a-7e464116c7dd"),
                            Country = "Russia",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(444),
                            DateOfBirth = new DateOnly(1828, 9, 9),
                            FirstName = "Lev",
                            LastName = "Tolstoy",
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(455)
                        },
                        new
                        {
                            Id = new Guid("21cb29da-047a-4d85-a581-8ef6cffec67f"),
                            Country = "Russia",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(459),
                            DateOfBirth = new DateOnly(1868, 3, 28),
                            FirstName = "Maxim",
                            LastName = "Gorkiy",
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(460)
                        },
                        new
                        {
                            Id = new Guid("3bc8f089-2d00-4346-af71-d9f9fcdceb20"),
                            Country = "Japan",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(494),
                            DateOfBirth = new DateOnly(1995, 7, 3),
                            FirstName = "Miya",
                            LastName = "Kazuki",
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(495)
                        },
                        new
                        {
                            Id = new Guid("188ec0f1-b4a1-4a86-9bb4-f249c2a1032b"),
                            Country = "Russia",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(498),
                            DateOfBirth = new DateOnly(1821, 11, 11),
                            FirstName = "Fedor",
                            LastName = "Dostoyevskiy",
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(499)
                        },
                        new
                        {
                            Id = new Guid("ec891ac2-f620-415f-9f86-3d15259eb071"),
                            Country = "Russia",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(501),
                            DateOfBirth = new DateOnly(1809, 1, 4),
                            FirstName = "Nikolay",
                            LastName = "Gogol",
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(502)
                        },
                        new
                        {
                            Id = new Guid("4792ce31-a3e8-4df3-b0d7-4ea1c8e40dbd"),
                            Country = "United Kingdom",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(509),
                            DateOfBirth = new DateOnly(1564, 4, 23),
                            FirstName = "William",
                            LastName = "Shakespeare",
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(510)
                        },
                        new
                        {
                            Id = new Guid("ac31fda2-411c-4669-8e42-b4b18cc659cb"),
                            Country = "Belarus",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(512),
                            DateOfBirth = new DateOnly(1924, 6, 22),
                            FirstName = "Vasil",
                            LastName = "Bykov",
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(512)
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("BorrowTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Genre")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CurrentReaderId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14ca202e-dfb4-4d97-b7ef-76cf510bf319"),
                            AuthorId = new Guid("4dc4b580-7fb5-4c2a-938a-7e464116c7dd"),
                            AuthorName = "Lev Tolstoy",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(732),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Novel",
                            ISBN = "ISBN 13: 9781566190275",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(734),
                            Title = "War and Peace"
                        },
                        new
                        {
                            Id = new Guid("2f346383-bd6a-4564-8dce-343c355e795a"),
                            AuthorId = new Guid("4dc4b580-7fb5-4c2a-938a-7e464116c7dd"),
                            AuthorName = "Lev Tolstoy",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(738),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Novel",
                            ISBN = "ISBN 13: 9780672523830",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(739),
                            Title = "Anna Karenina"
                        },
                        new
                        {
                            Id = new Guid("ad9c4dbe-5dff-43e0-a58c-cea9327a4464"),
                            AuthorId = new Guid("21cb29da-047a-4d85-a581-8ef6cffec67f"),
                            AuthorName = "Maxim Gorkiy",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(742),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Friction",
                            ISBN = "ISBN-13: 9798390533352",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(742),
                            Title = "Old Izergil"
                        },
                        new
                        {
                            Id = new Guid("f31001c4-fb5d-42f0-aafd-dd0e6e08476e"),
                            AuthorId = new Guid("3bc8f089-2d00-4346-af71-d9f9fcdceb20"),
                            AuthorName = "Miya Kazuki",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(745),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Friction",
                            ISBN = "ISBN-13: 9781718357976",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(745),
                            Title = "Ascendance of a bookworm"
                        },
                        new
                        {
                            Id = new Guid("6328fcf9-5846-4f7c-960c-da5ea5c32f22"),
                            AuthorId = new Guid("188ec0f1-b4a1-4a86-9bb4-f249c2a1032b"),
                            AuthorName = "Fedor Dostoyevskiy",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(748),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Novel",
                            ISBN = "ISBN 13: 9785050000149",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(749),
                            Title = "Crime and Punishment"
                        },
                        new
                        {
                            Id = new Guid("424e64e8-c811-42ef-8153-f7952ced8c51"),
                            AuthorId = new Guid("188ec0f1-b4a1-4a86-9bb4-f249c2a1032b"),
                            AuthorName = "Fedor Dostoyevskiy",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(751),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Novel",
                            ISBN = "ISBN 10: 0374528373",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(752),
                            Title = "The Brothers Karamazov"
                        },
                        new
                        {
                            Id = new Guid("81ebde25-7b81-4bf2-8691-edef624642d8"),
                            AuthorId = new Guid("ec891ac2-f620-415f-9f86-3d15259eb071"),
                            AuthorName = "Nikolay Gogol",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(754),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Satire",
                            ISBN = "ISBN 10: 0300060998",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(755),
                            Title = "Dead souls"
                        },
                        new
                        {
                            Id = new Guid("8e32b21e-1a32-4272-bc46-6f7b709a7696"),
                            AuthorId = new Guid("4792ce31-a3e8-4df3-b0d7-4ea1c8e40dbd"),
                            AuthorName = "William Shakespeare",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(758),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "Shakespearean tragedy",
                            ISBN = "ISBN 13: 9780671722852",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(759),
                            Title = "Romeo and Juliet"
                        },
                        new
                        {
                            Id = new Guid("a0283873-60b8-45de-a411-02a0a3fbc465"),
                            AuthorId = new Guid("ac31fda2-411c-4669-8e42-b4b18cc659cb"),
                            AuthorName = "Vasil Bykov",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(762),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc varius rhoncus nisl, nec egestas lacus pellentesque vitae. Donec eleifend urna at nunc tincidunt facilisis. Nam consectetur odio erat sed.",
                            Genre = "War novel",
                            ISBN = "ISBN 13: 9781909156821",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2024, 7, 21, 10, 56, 15, 879, DateTimeKind.Local).AddTicks(762),
                            Title = "Alpine Ballad"
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Reader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.HasOne("Library.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.Reader", "CurrentReader")
                        .WithMany()
                        .HasForeignKey("CurrentReaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Library.Domain.Entities.Reader", null)
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("ReaderId");

                    b.Navigation("Author");

                    b.Navigation("CurrentReader");
                });

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Domain.Entities.Reader", b =>
                {
                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
